# -*- coding: utf-8 -*-
"""creating kernel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iC_dyrgbU-vRtF2GkoMXWWQwYjdf4yib
"""

# creating input and kernel tensor
import torch

# Input tensor
input_tensor = torch.tensor([[1, 1, 1, 0, 0, 0],
                            [1, 1, 1, 0, 0, 0],
                            [1, 1, 1, 0, 0, 0],
                            [1, 1, 1, 0, 0, 0],
                            [1, 1, 1, 0, 0, 0],
                            [1, 1, 1, 0, 0, 0]])

# Kernel tensor (for detecting vertical edges)
kernel = torch.tensor([[-1, 0, 1],
                        [-1, 0, 1],
                        [-1, 0, 1]])

#Convolution with different strides
# Convolution with stride 1
output_stride1 = torch.nn.functional.conv2d(input_tensor.unsqueeze(0).unsqueeze(0), kernel.unsqueeze(0).unsqueeze(0), stride=1)

# Convolution with stride 2
output_stride2 = torch.nn.functional.conv2d(input_tensor.unsqueeze(0).unsqueeze(0), kernel.unsqueeze(0).unsqueeze(0), stride=2)
print(output_stride1)#The output will be a 4x4 tensor. Produces a detailed output, capturing fine-grained features.
print(output_stride2)#The output will be a 2x2 tensor.Produces a coarser output, reducing computational cost but potentially losing some information.]

#Best practices to consider when implementing convolution in PyTorch
# Leverage PyTorch's  Module
import torch.nn as nn

# Define the convolutional layer
conv_layer = nn.Conv2d(in_channels=1, out_channels=1, kernel_size=3, stride=1, padding=1)
'''
Batch Processing
PyTorch's convolutional layers are designed to handle batches of images efficiently.
Make sure that  your input tensor has the batch dimension as the first dimension.
'''
#Assuming a batch of 6 images
input_tensor = torch.randn(6, 1, 6, 6)  # Batch, Channel, Height, Width
output = conv_layer(input_tensor)
if torch.cuda.is_available():#Here we verifying the GPU Availability
    device = torch.device("cuda")
    input_tensor = input_tensor.to(device)
    conv_layer = conv_layer.to(device)
print(output)#You'll get an output tensor of the same shape: (16, 1, 6, 6).
print(conv_layer)